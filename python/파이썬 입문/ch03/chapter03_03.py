# Chapter03-3
# 리스트 사용법
# 자료구조에서 중요
# 리스트 자료형(순서있음, 중복가능, 수정가능, 삭제가능)

# 선언
a = [] # 리스트는 대괄호 사용
b = list()
c = [70, 75, 80, 85] # len
d = [1000, 10000, 'Ace', 'Base', 'Captin'] # 서로 다른 자료형을 같이 담을 수 있음
e = [1000, 10000, ['Ace', 'Base', 'Captin']] # 리스트 안에 리스트도 담을 수 있음
f = [21.42, 'foobar', 3, 4, False, 3.14159] # bool도 담을 수 있음

print(type(a))
print(len(c))

# 인덱싱
print('>>>>>')
print('d - ', type(d), d) # d의 타입과 값들을 출력함
print('d - ', d[1]) # d 안에 있는 10000을 출력함
print('d - ', d[0] + d[1] + d[1]) # 10000 + 10000 + 1000 = 21000을 출력함
print('d - ', d[-1]) # 오른쪽에 있는 값 Captin을 출력함
print('e - ', e[-1][1]) # e 안에 중첩 된 리스트 1번째 Base를 출력함
print('e - ', list(e[-1][1])) # 타입이 str인데 list를 넣어 한글자 한글자 분해해서 리스트 형태로 출력함

# 슬라이싱
print('>>>>>')
print('d - ', d[0:3]) # 0~2 / 1000, 10000, 'Ace' 을 출력함
print('d - ', d[2:]) # 2 ~ 4 / 'Ace', 'Base', 'Captin' 을 출력함
print('e - ', e[-1][1:3]) # 중첩 된 리스트 안에 1 ~ 2 / 'Base', 'Captin' 을 출력함

# 리스트 연산
print('>>>>>')
print('c + d', c + d) # c와 d가 합쳐서 한 개의 리스트로 출력함
print('c * 3', c * 3) # c 안에 있던 값들을 순서대로 3번 반복하여 출력함
print("'Test' + c[0]", 'Test' + str(c[0])) # 문자열 Test와 c 안에 있는 70을 문자열로 바꿔 둘이 합쳐서 출력함

# 값 비교
print(c == c[:3] + c[3:]) # 갯수가 똑같게 나왔기때문에 True이 출력됌
print(c)
print(c[:3] + c[3:])

# Identity(id)
temp = c # c의 리스트 값을 temp에도 할당시킨다.
print(temp, c) # 값이 똑같이 출력됀다.
print(id(temp)) # c와 같은 값을 공유하고 있기때문에 고유값이 같다.
print(id(c)) # 위와 같음.

# 리스트 수정, 삭제
print('>>>>>')
c[0] = 4 # c의 있는 0번째 인덱스를 4로 수정하였다.
print('c - ', c) # [4, 75, 80, 85]

c[1:2] = ['a', 'b', 'c'] # c의 1번째, 2번째값이 'a', 'b', 'c' 로 수정돼었다. / [['a', 'b', 'c']] 로 정의하면 리스트 안에 리스트가 중첩 됀다. / 슬라이싱 범위를 지정했을 땐 하나의 원소로 정의
print('c - ', c) # [4, 'a', 'b', 'c', 80, 85]

c[1] = ['a', 'b', 'c'] # c의 1번째 자리에 슬라이싱 범위를 지정하지않고 리스트를 지정해줘 라고 하면 리스트 안의 리스트로 중첩이 되어 정의됀다.
print('c - ', c) # [4, ['a', 'b', 'c'], 'b','c', 80, 85]

c[1:3] = [] # 공백을 넣으니 삭제되어 출력됀다.
print('c - ', c) # [4, 'c', 80, 85] / 1~3 값을 공백으로 출력

del c[2] # c의 2번째 인덱스 값을 삭제하기 위해 del를 쓴다.
print('c- ', c) # [4, 'c', 85]

print()

# 리스트 함수
a = [5, 2, 3, 1, 4]
print('a - ', a)

a.append(10) # aappend는 맨 끝부분에 데이터를 삽입할 때 쓰는 함수이다.
print('a - ', a)

a.sort() # sort는 뒤죽박죽 섞여있던 데이터들을 오름차순으로 정렬하는 함수이다.
print('a - ', a)

a.reverse() # reverse는 들어있는 데이터를 반대로 바꿔서 출력하는 함수이다.
print('a - ', a)

print('a - ', a.index(3), a[3]) # index는 인덱스 값을 가져올 때 함수이다.

a.insert(2, 7) # insert는 인덱스 값을 삽입하고 싶을 때 쓰는 함수이다.
print('a - ', a)

a.reverse()
print('a - ', a)

# del a[6] / 리스트 안에 값들이 1만개, 10만개 있을 때 비효율적이라 많이 사용하진않는다. / 다만 값들이 적을 땐 사용해도 좋다.
a.remove(10) # remove는 제거 할 인덱스 값을 넣으면 삭제하는 함수이다. / 제일 많이 사용하게 될 삭제함수이다.
print('a - ', a)

print('a - ', a.pop()) # pop은 마지막에 인덱스 값을 가져와 나머지 값으로 리스트를 구성해서 출력하는 함수이다.
print('a - ', a)

print('a - ', a.pop())
print('a - ', a)

print('a - ', a.count(4)) # count는 원하는 값이 몇개가 있는지 확인하고 싶을 때 쓰는 함수이다.

ex = [8, 9]
a.extend(ex) # extend는 내가 맨 끝에 붙이고 싶은 값을 지정하여 리스트 값 맨 뒤에 붙일 때 쓰는 함수이다.
print('a - ', a)

# 삭제 : remove ( 내가 원하는 값을 바로 삭제할 수있다. ), pop ( 오른쪽 맨 끝부분 값만 삭제한다. ), del ( 삭제해야 할 인덱스 번호를 알아야 삭제할 수있다. )

# 반복문 활동
while a:
    data = a.pop() # while 문을 이용하여 pop을 이용해서 오른쪽 끝 부분부터 한글자 한글자 출력했다.
    print(data)