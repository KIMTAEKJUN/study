# Chapter03-4
# 튜플 사용법
# 리스트와 비교 필요
# 튜플 자료형(순서있음, 중복가능, 수정불가, 삭제불가) / 불변

# 선언
a = () # 튜플은 소괄호 사용
b = (1,) # 값이 한개일 땐 꼭 콤마를 넣어줘야 타입이 tuple로 인식됀다. 두 개이상 일 땐 ㄱㅊ
c = (11, 12, 13, 14)
d = (100, 1000, 'Ace', 'Base', 'Captin') # 리스트와 같이 다른 자료형들도 같이 넣어줄 수 있음
e = (100, 1000, ('Ace', 'Base', 'Captin')) # 리스트와 같이 안에 튜플을 넣어 중첩을 할 수 있음.

print(type(a), type(b))

# 인덱싱
print('>>>>>')
print('d - ', d[1]) 
print('d - ', d[0] + d[1] + d[1]) # 리스트와 같이 더해줄 수 있다. / 100 + 1000 + 1000 = 2100
print('d - ', d[-1]) # 리스트와 같이 오른쪽 끝에 있는 값이 출력됀다.
print('e - ', e[-1]) # 튜플로 반환이 되어 안에 중첩되어 있는 값으로 출력됀다. / ('Ace', 'Base', 'Captin')
print('e - ', e[-1][1]) # 중첩되어 있는 튜플 값 안에 들어있는 1번째 인덱스 값이 출력됀다. / Base
print('e - ', list(e[-1][1])) # 아까 출력된 Base이란 값이 리스트로 형변환되어 출력됀다. / ['B', 'a', 's', 'e']

# 수정불가
# d[0] = 1500 / 할당이 안됌 수정 불가

# 슬라이싱
print('>>>>>')
print('d - ', d[0: 3]) # 리스트와 같이 튜플 안에 있는 값을 슬라이싱해서 출력됀다. / (100, 1000, 'Ace')
print('d - ', d[2:]) # 리스트와 같이 2번째 인덱스 값부터 끝까지 출력됀다. / ('Ace', 'Base', 'Captin')
print('e - ', e[2][1:3]) # 튜플 안에 중첩되어 있는 튜플 값 안에서 인덱스 1번째~2번째 값이 출력됀다. / ('Base', 'Captin')

# 튜플 연산
print('>>>>>')
print('c + d', c + d) # 리스트와 같이 튜플 c의 값과 튜플 d의 값이 합쳐서 출력됀다. / (11, 12, 13, 14, 100, 1000, 'Ace', 'Base', 'Captin')
print('c * 3', c * 3) # 리스트와 같이 c 안의 값들이 모두 3번씩 반복돼서 출력됀다. / (11, 12, 13, 14, 11, 12, 13, 14, 11, 12, 13, 14)

# 튜플 함수
a = (5, 2, 3, 1, 4)
print('a - ', a)

print('a - ', a.index(3)) # a의 인덱스 3번째 값을 출력한다. / a - 2
print('a - ', a.count(2)) # a의 2라는 값이 몇개인지 출력한다. / a - 1

# 팩킹 & 언팩킹(Packing, and Unpacking)

# 팩킹
t = ('foo', 'bar', 'baz', 'qux') # 여러 개 값을 하나로 묶는 걸 팩킹이라 한다.

print(t)
print(t[0])
print(t[-1])

# 언팩킹1
# 언팩킹 -> 팩킹 된 값들을 변수를 지정하여 각각 할당 해주는 걸 언팩킹이라 한다. / 하나로 된 튜플을 풀어서 각각 할당 해주는 걸 언팩킹이라 한다.
(x1, x2, x3, x4) = t

print(type(x1), type(x2), type(x3), type(x4))
print(x1, x2, x3, x4)

# 패킹 & 언팩킹
t2 = 1, 2, 3 # 가로를 넣지않아도 튜플 선언 / 팩킹
t3 = 4, # 콤마를 넣으면 튜플 선언 / 팩킹
x1, x2, x3 = t2 # 언팩킹 / t2 안에 들어 있는 값들을 각각 변수에 할당 해주었기때문에
x4, x5, x6 = 4, 5, 6 # 언팩킹 / 4, 5, 6 를 각각 변수에 할당 해주었기때문에

print(t2)
print(t3)
print(x1, x2, x3)
print(x4, x5, x6)